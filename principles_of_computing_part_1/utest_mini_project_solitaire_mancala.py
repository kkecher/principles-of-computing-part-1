#!/usr/bin/env python2

import unittest
from mini_project_solitaire_mancala import SolitaireMancala

class TestSolitaireMancala(unittest.TestCase):
    def test_init(self):
        game = SolitaireMancala()
        self.assertEqual(game._board, [0])

    def test_set_board(self):
        game = SolitaireMancala()
        game.set_board([5, 4, 6, 1, 7, 4, 0, 0])
        self.assertEqual(game._board, [5, 4, 6, 1, 7, 4, 0, 0])
        game.set_board([0])
        self.assertEqual(game._board, [0])
        game.set_board([2, 2])
        self.assertEqual(game._board, [2, 2])
        game.set_board([4, 2])
        self.assertEqual(game._board, [4, 2])
        game.set_board([666])
        self.assertEqual(game._board, [666])
        game.set_board([])
        self.assertEqual(game._board, [])

    def test_str(self):
        game = SolitaireMancala()
        game.set_board([5, 4, 6, 1, 7, 4, 0, 0])
        self.assertEqual(game.__str__(), '[0, 0, 4, 7, 1, 6, 4, 5]')
        game.set_board([0])
        self.assertEqual(game.__str__(), '[0]')
        game.set_board([2, 2])
        self.assertEqual(game.__str__(), '[2, 2]')
        game.set_board([4, 2])
        self.assertEqual(game.__str__(), '[2, 4]')
        game.set_board([666])
        self.assertEqual(game.__str__(), '[666]')
        game.set_board([])
        self.assertEqual(game.__str__(), '[]')

    def test_get_num_seeds(self):
        game = SolitaireMancala()
        game.set_board([5, 4, 6, 1, 7, 4, 0, 0])
        self.assertEqual(game.get_num_seeds(4), 7)
        self.assertEqual(game.get_num_seeds(-4), 7)
        self.assertEqual(game.get_num_seeds(0), 5)
        self.assertEqual(game.get_num_seeds(-1), 0)
        self.assertEqual(game.get_num_seeds(1), 4)
        game.set_board([0])
        self.assertEqual(game.get_num_seeds(1), 'abs(house_num) should be less len(board).\nlen(board) == 1\nabs(house_num) == 1')
        game.set_board([])
        self.assertEqual(game.get_num_seeds(0), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 0')
        self.assertEqual(game.get_num_seeds(666), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 666')
        self.assertEqual(game.get_num_seeds(-1), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 1')

    def test_is_legal_move(self):
        game = SolitaireMancala()
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.is_legal_move(0), False)
        self.assertEqual(game.is_legal_move(1), False)
        self.assertEqual(game.is_legal_move(-1), False)
        self.assertEqual(game.is_legal_move(5), True)
        self.assertEqual(game.is_legal_move(666), 'abs(house_num) should be less len(board).\nlen(board) == 8\nabs(house_num) == 666')
        game.set_board([5, 4, 6, 1, 7, 5, 0, 7])
        self.assertEqual(game.is_legal_move(1), False)
        self.assertEqual(game.is_legal_move(-1), True)
        self.assertEqual(game.is_legal_move(5), True)
        game.set_board([0])
        self.assertEqual(game.is_legal_move(0), False)
        self.assertEqual(game.is_legal_move(1), 'abs(house_num) should be less len(board).\nlen(board) == 1\nabs(house_num) == 1')
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.is_legal_move(0), False)
        self.assertEqual(game.is_legal_move(1), True)
        self.assertEqual(game.is_legal_move(2), True)
        self.assertEqual(game.is_legal_move(3), True)
        self.assertEqual(game.is_legal_move(4), False)
        self.assertEqual(game.is_legal_move(-1), False)
        self.assertEqual(game.is_legal_move(-2), True)
        self.assertEqual(game.is_legal_move(-5), False)
        game.set_board([])
        self.assertEqual(game.is_legal_move(0), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 0')
        self.assertEqual(game.is_legal_move(-1), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 1')
        self.assertEqual(game.is_legal_move(666), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 666')

    def test_apply_move(self):
        game = SolitaireMancala()
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.apply_move(5), [6, 5, 7, 2, 8, 0, 0, 0])
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.apply_move(1), [6, 3, 6, 1, 7, 5, 0, 0])
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.apply_move(-1), [5, 4, 6, 1, 7, 5, 0, 0])
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.apply_move(0), [5, 4, 6, 1, 7, 5, 0, 0])
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.apply_move(666), 'abs(house_num) should be less len(board).\nlen(board) == 8\nabs(house_num) == 666')
        game.set_board([5, 4, 6, 1, 7, 5, 0, 7])
        self.assertEqual(game.apply_move(1), [6, 3, 6, 1, 7, 5 ,0, 7])
        game.set_board([5, 4, 6, 1, 7, 5, 0, 7])
        self.assertEqual(game.apply_move(-1), [6, 5, 7, 2, 8, 6, 1, 0])
        game.set_board([5, 4, 6, 1, 7, 5, 0, 7])
        self.assertEqual(game.apply_move(5), [6, 5, 7, 2, 8, 0, 0, 7])
        game.set_board([0])
        self.assertEqual(game.apply_move(0), [0])
        game.set_board([0])
        self.assertEqual(game.apply_move(1), 'abs(house_num) should be less len(board).\nlen(board) == 1\nabs(house_num) == 1')
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.apply_move(0), [2, 1, 2, 3, 2])
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.apply_move(1), [3, 0, 2, 3, 2])
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.apply_move(2), [3, 2, 0, 3, 2])
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.apply_move(3), [3, 2, 3, 0, 2])
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.apply_move(4), [2, 1, 3, 4, 0])
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.apply_move(-1), [2, 1, 3, 4, 0])
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.apply_move(-2), [3, 2, 3, 0, 2])
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.apply_move(-5), [2, 1, 2, 3, 2])
        game.set_board([])
        self.assertEqual(game.apply_move(0), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 0')
        game.set_board([])
        self.assertEqual(game.apply_move(-1), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 1')
        game.set_board([])
        self.assertEqual(game.apply_move(666), 'abs(house_num) should be less len(board).\nlen(board) == 0\nabs(house_num) == 666')

    def test_choose_move(self):
        game = SolitaireMancala()
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.choose_move(), 5)
        game.set_board([5, 4, 6, 1, 7, 5, 0, 7])
        self.assertEqual(game.choose_move(), 5)
        game.set_board([0])
        self.assertEqual(game.choose_move(), 0)
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.choose_move(), 1)
        game.set_board([])
        self.assertEqual(game.choose_move(), 0)

    def test_is_game_won(self):
        game = SolitaireMancala()
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.is_game_won(), False)
        game.set_board([5, 4, 6, 1, 7, 5, 0, 7])
        self.assertEqual(game.is_game_won(), False)
        game.set_board([0])
        self.assertEqual(game.is_game_won(), True)
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.is_game_won(), False)
        game.set_board([])
        self.assertEqual(game.is_game_won(), True)
        game.set_board([0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.is_game_won(), True)

    def test_plan_moves(self):
        game = SolitaireMancala()
        game.set_board([5, 4, 6, 1, 7, 5, 0, 0])
        self.assertEqual(game.plan_moves(), [5])
        game.set_board([5, 4, 6, 1, 7, 5, 0, 7])
        self.assertEqual(game.plan_moves(), [5, 7, 3])
        game.set_board([0])
        self.assertEqual(game.plan_moves(), [])
        game.set_board([2, 1, 2, 3, 2])
        self.assertEqual(game.plan_moves(), [1, 2, 1, 3, 1])
        game.set_board([])
        self.assertEqual(game.plan_moves(), [])
        game.set_board([0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.plan_moves(), [])
        game.set_board([1, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.plan_moves(), [])
        game.set_board([0, 1, 0, 0, 0, 0, 0])
        self.assertEqual(game.plan_moves(), [1])
        game.set_board([10, 0, 0, 0, 0, 0, 0, 7])
        self.assertEqual(game.plan_moves(), [7, 1])
        game.set_board([0, 1, 1, 3, 0])
        self.assertEqual(game.plan_moves(), [1, 3, 1, 2, 1])
        game.set_board([1])
        self.assertEqual(game.plan_moves(), [])
        game.set_board([5, 1])
        self.assertEqual(game.plan_moves(), [1])
        game.set_board([5, 0])
        self.assertEqual(game.plan_moves(), [])
        game.set_board([5, 2])
        self.assertEqual(game.plan_moves(), [])

if __name__ == '__main__':
    unittest.main()
